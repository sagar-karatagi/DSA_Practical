// minimum spanning tree of a given undirected graph

#include <iostream>
using namespace std;

const int MAX_VERTICES = 10;
const int INFINITY_VALUE = 99;

class SpanningTree
{
    int graph[MAX_VERTICES][MAX_VERTICES];
    int spanningTree[MAX_VERTICES][MAX_VERTICES];
    int numVertices;
    int numEdges;
    int minCost;

public:
    SpanningTree()
    {
        minCost = 0;
        for (int i = 0; i < MAX_VERTICES; i++)
        {
            for (int j = 0; j < MAX_VERTICES; j++)
            {
                graph[i][j] = 0;
                spanningTree[i][j] = 0;
            }
        }
    }

    void createGraph()
    {
        int i, j;
        char ch;
        cout << "Enter the number of vertices: ";
        cin >> numVertices;

        do
        {
            cout << "Enter an edge: ";
            cin >> i >> j;
            cout << "Enter the cost of an edge from " << i << " to " << j << ": ";
            cin >> graph[i][j];
            graph[j][i] = graph[i][j];
            cout << "Add another edge? (y/n): ";
            cin >> ch;
        } while (ch == 'y');
    }

    void displayGraph()
    {
        cout << "Graph: " << endl;
        for (int i = 0; i < numVertices; i++)
        {
            for (int j = 0; j < numVertices; j++)
                cout << graph[i][j] << "\t";
            cout << "\n";
        }
    }

    void displaySpanningTree()
    {
        cout << "Spanning Tree for the given graph: " << endl;
        for (int i = 0; i < numVertices; i++)
        {
            for (int j = 0; j < numVertices; j++)
                cout << spanningTree[i][j] << "\t";
            cout << "\n";
        }
        cout << "Minimum Cost of Minimum Spanning Tree (MST) is: " << minCost;
    }

    void primsAlgorithm()
    {
        int cost[MAX_VERTICES][MAX_VERTICES], distance[MAX_VERTICES], source[MAX_VERTICES], visited[MAX_VERTICES];
        int minDistance, v, u, i, j;

        for (i = 0; i < numVertices; i++)
        {
            for (j = 0; j < numVertices; j++)
            {
                if (graph[i][j] == 0)
                    cost[i][j] = INFINITY_VALUE;
                else
                    cost[i][j] = graph[i][j];
            }
        }

        distance[0] = 0;
        visited[0] = 1;

        for (i = 1; i < numVertices; i++)
        {
            distance[i] = cost[0][i];
            source[i] = 0;
            visited[i] = 0;
        }

        numEdges = numVertices - 1;

        while (numEdges > 0)
        {
            minDistance = INFINITY_VALUE;

            for (i = 1; i < numVertices; i++)
            {
                if (visited[i] == 0 && distance[i] < minDistance)
                {
                    minDistance = distance[i];
                    v = i;
                }
            }

            u = source[v];
            spanningTree[u][v] = distance[v];
            spanningTree[v][u] = distance[v];
            numEdges--;
            visited[v] = 1;

            for (i = 1; i < numVertices; i++)
            {
                if (visited[i] == 0 && cost[i][v] < distance[i])
                {
                    distance[i] = cost[i][v];
                    source[i] = v;
                }
            }
            minCost += cost[u][v];
        }
    }
};

int main()
{
    SpanningTree tree;
    tree.createGraph();
    tree.displayGraph();
    tree.primsAlgorithm();
    tree.displaySpanningTree();
    return 0;
}
