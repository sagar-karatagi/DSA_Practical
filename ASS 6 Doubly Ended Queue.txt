// Doubly Ended Queue


#include <iostream>
using namespace std;

class Deque
{

private:
    int front, rear, capacity;
    int *arr;

public:
    Deque(int size)
    {
        capacity = size;
        front = -1;
        rear = 0;
        arr = new int[capacity];
    }

    // Function to add an element at the front of the deque
    void insertFront(int value)
    {
        if (isFull())
        {
            cout << "Deque is full. Cannot insert at the front." << endl;
            return;
        }
        if (front == -1)
        {
            front = rear = 0;
        }
        else if (front == 0)
        {
            front = capacity - 1;
        }
        else
        {
            front--;
        }
        arr[front] = value;
        cout << "Inserted " << value << " at the front of the deque." << endl;
    }

    // Function to add an element at the rear of the deque
    void insertRear(int value)
    {
        if (isFull())
        {
            cout << "Deque is full. Cannot insert at the rear." << endl;
            return;
        }
        if (front == -1)
        {
            front = rear = 0;
        }
        else if (rear == capacity - 1)
        {
            rear = 0;
        }
        else
        {
            rear++;
        }
        arr[rear] = value;
        cout << "Inserted " << value << " at the rear of the deque." << endl;
    }

    // Function to remove an element from the front of the deque
    void deleteFront()
    {
        if (isEmpty())
        {
            cout << "Deque is empty. Cannot delete from the front." << endl;
            return;
        }
        cout << "Deleted " << arr[front] << " from the front of the deque." << endl;
        if (front == rear)
        {
            front = rear = -1;
        }
        else if (front == capacity - 1)
        {
            front = 0;
        }
        else
        {
            front++;
        }
    }

    // Function to remove an element from the rear of the deque
    void deleteRear()
    {
        if (isEmpty())
        {
            cout << "Deque is empty. Cannot delete from the rear." << endl;
            return;
        }
        cout << "Deleted " << arr[rear] << " from the rear of the deque." << endl;
        if (front == rear)
        {
            front = rear = -1;
        }
        else if (rear == 0)
        {
            rear = capacity - 1;
        }
        else
        {
            rear--;
        }
    }

    // Function to check if the deque is empty
    bool isEmpty()
    {
        return front == -1;
    }

    // Function to check if the deque is full
    bool isFull()
    {
        return (front == 0 && rear == capacity - 1) || (front == rear + 1);
    }

    // Function to display the elements of the deque
    void display()
    {
        if (isEmpty())
        {
            cout << "Deque is empty." << endl;
            return;
        }
        cout << "Deque: ";
        int i = front;
        while (true)
        {
            cout << arr[i] << " ";
            if (i == rear)
                break;
            if (i == capacity - 1)
            {
                i = 0;
            }
            else
            {
                i++;
            }
        }
        cout << endl;
    }
};

int main()
{
    int choice, value, size;
    cout << "Enter the size of the deque: ";
    cin >> size;
    Deque myDeque(size);
    do
    {
        cout << "\nChoose an option:\n";
        cout << "1. Insert at the front\n";
        cout << "2. Insert at the rear\n";
        cout << "3. Delete from the front\n";
        cout << "4. Delete from the rear\n";
        cout << "5. Display the deque\n";
        cout << "6. Exit\n";
        cin >> choice;
        switch (choice)
        {
        case 1:
            cout << "Enter a value to insert at the front: ";
            cin >> value;
            myDeque.insertFront(value);
            break;
        case 2:
            cout << "Enter a value to insert at the rear: ";
            cin >> value;
            myDeque.insertRear(value);
            break;
        case 3:
            myDeque.deleteFront();
            break;
        case 4:
            myDeque.deleteRear();
            break;
        case 5:
            myDeque.display();
            break;
        case 6:
            cout << "Exiting the program." << endl;
            break;
        default:
            cout << "Invalid choice. Please try again." << endl;
        }
    } while (choice != 6);

    return 0;
}
