// Assignment No 11 CODE :
#include <iostream>
#include <queue>
#include <vector>
using namespace std;
const int MAX = 100;
vector<int> adjacency[MAX];
bool visited[MAX];
void bfs(int v, int vertices)
{
    queue<int> q;
    q.push(v);
    visited[v] = true;
    cout << "BFS Traversal: ";
    while (!q.empty())
    {
        int printVertex = q.front();
        q.pop();
        cout << printVertex << " ";
        for (int i = 0; i < adjacency[printVertex].size(); i++)
        {
            if (!visited[adjacency[printVertex][i]])
            {
                q.push(adjacency[printVertex][i]);
                visited[adjacency[printVertex][i]] = true;
            }
        }
    }
    cout << endl;
}
void dfs(int v)
{
    cout << v << " ";
    visited[v] = true;
    for (int i = 0; i < adjacency[v].size(); i++)
    {
        if (!visited[adjacency[v][i]])
        {
            dfs(adjacency[v][i]);
        }
    }
}
int main()
{
    int vertices, edges;
    cout << "Enter the number of vertices: ";
    cin >> vertices;
    cout << "Enter the number of edges: ";
    cin >> edges;
    cout << "Enter the edges in the format 'u v' (u connected to v):" << endl;
    for (int i = 0; i < edges; i++)
    {
        int u, v;
        cin >> u >> v;
        adjacency[u].push_back(v);
        adjacency[v].push_back(u); // For an undirected graph
    }
    int startingVertex;
    cout << "Enter the starting vertex for traversal: ";
    cin >> startingVertex;

    // BFS
    for (int i = 0; i < MAX; i++)
    {
        visited[i] = false;
    }

    bfs(startingVertex, vertices);
    // Reset visited array for DFS
    for (int i = 0; i < MAX; i++)
    {
        visited[i] = false;
    }

    // DFS
    cout << "DFS Traversal: ";
    dfs(startingVertex);
    cout << endl;
    return 0;
}

// OUTPUT:
// Enter the number of vertices: 5
// Enter the number of edges: 5
// Enter the edges in the format 'u v' (u connected to v):
// 0 1
// 0 2
// 2 3
// 1 3
// 3 4
// Enter the starting vertex for traversal: 0
// BFS Traversal: 0 1 2 3 4
// DFS Traversal: 0 1 3 2 4